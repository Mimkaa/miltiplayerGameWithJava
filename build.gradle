plugins {
    id 'java-library'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.13'
}

group 'ch.unibas.dmi.dbis'
version '0.0.1-ALPHA'

mainClassName = 'ch.unibas.dmi.dbis.cs108.example.ThinkOutsideTheRoom'

javafx {
    version = "19.0.2.1"
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.base', 'javafx.graphics' ]
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // JavaFX dependencies (the plugin helps manage these)
    implementation 'org.openjfx:javafx-controls:19.0.2.1'
    implementation 'org.openjfx:javafx-fxml:19.0.2.1'

    // Dyn4j dependency for physics simulation.
    implementation 'org.dyn4j:dyn4j:5.0.2'

    // Reflections for classpath analysis.
    implementation 'org.reflections:reflections:0.10.2'

    // Logging
    implementation 'ch.qos.logback:logback-classic:1.4.6'

    // JUnit for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.3'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation("org.junit.jupiter:junit-jupiter:5.+")

    // Lombok for compile-time code generation.
    compileOnly 'org.projectlombok:lombok:1.18.26'
    annotationProcessor 'org.projectlombok:lombok:1.18.26'
}

test {
    useJUnitPlatform()
}

jar {
    duplicatesStrategy(DuplicatesStrategy.INCLUDE)
    manifest {
        attributes(
                'Main-Class': mainClassName
        )
    }
    from {
        configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } +
                configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    // Optional: a run block with JVM args (if needed)
    run {
        jvmArgs = [
                '--module-path', configurations.runtimeClasspath.asPath,
                '--add-modules', 'javafx.controls,javafx.fxml,javafx.base,javafx.graphics'
        ]
    }

    task printRuntimeClasspath {
        doLast {
            println "Runtime classpath: " + configurations.runtimeClasspath.asPath
        }
    }
}
